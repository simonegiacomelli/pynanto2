import itertools
# credits: https://david.rothlis.net/running-tests-on-remote-hardware-from-your-ide/
# https://github.com/stb-tester/stbt-rig/blame/cdcadca/stbt_rig.py#L1172-L1291
try:
    import pytest

    def pytest_addoption(parser):
        group = parser.getgroup("stbt", "stb-tester REST API")
        for arg in itertools.chain(ARGS, RUN_ARGS):
            if arg.cmdline_only:
                continue
            d = {k: v for k, v in arg._asdict().items()
                 if (k not in ['name', 'completer', 'cmdline_only'] and
                     v is not None)}
            group.addoption(arg.longname, **d)


    def pytest_collect_file(path, parent):
        if path.ext == ".py":
            return StbtCollector(path, parent)
        else:
            return None


    class StbtCollector(pytest.File):
        def collect(self):
            with open(self.fspath.strpath) as f:
                # We implement our own parsing to avoid import stbt ImportErrors
                for n, line in enumerate(f):
                    m = re.match(r'^def\s+(test_[a-zA-Z0-9_]*)', line)
                    if m:
                        yield StbtRemoteTest(self, self.name, m.group(1), n + 1)


    class StbtRemoteTest(pytest.Item):
        def __init__(self, parent, filename, testname, line_number):
            super(StbtRemoteTest, self).__init__(testname, parent)
            self._filename = filename
            self._testname = testname
            self._line_number = line_number

        def __repr__(self):
            return "StbtRemoteTest(%r, %r, %r)" % (
                self._filename, self._testname, self._line_number)

        def runtest(self):
            j = self.session.stbt_run_prep
            try:
                self.session.stbt_args.test_cases = ["%s::%s" % (
                    self._filename, self._testname)]
                cmd_run_body(self.session.stbt_args, self.session.stbt_node, j)
            except requests.exceptions.HTTPError as e:
                message = "HTTP %i Error: %s" % (
                    e.response.status_code, e.response.text)
                if hasattr(e, "request"):
                    message += " during %s %s" % (
                        e.request.method, e.request.url)  # pylint:disable=no-member
                sys.stderr.write(message + '\n')
                sys.stderr.flush()
                raise
            finally:
                self.session.stbt_args.test_cases = None

        def reportinfo(self):
            return self.fspath, self._line_number, ""


    class Args(object):
        """Pretends to be the result of calling `argparser` `parse_args` so we
        can reuse code from stbt_rig for filling in the details"""

        def __init__(self, config):
            for arg in itertools.chain(ARGS, RUN_ARGS):
                dest = arg.dest or arg.longname.strip('-').replace('-', '_')
                if arg.cmdline_only:
                    setattr(self, dest, arg.default)
                else:
                    setattr(self, dest, config.getvalue(dest))

            self.test_cases = None
            self.mode = "pytest"
            self.command = "run"


    def pytest_sessionstart(session):
        args = Args(session.config)
        session.stbt_args = args
        resolve_args(session.stbt_args)

        pluginmanager = session.config.pluginmanager
        if not session.config.option.collectonly:
            pluginmanager.unregister(name="python")

        capmanager = pluginmanager.getplugin('capturemanager')
        capmanager.suspend_global_capture(in_=True)
        for portal_auth_token in iter_portal_auth_tokens(
                args.portal_url, args.portal_auth_file, args.mode):
            try:
                portal = Portal(args.portal_url, portal_auth_token)
                node = Node(portal, session.config.getvalue("node_id"))

                j = cmd_run_prep(args, portal)
                break
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 403:
                    # Unauthorised. Try again, but with a new password.
                    logger.error('Authentication failure with token "...%s"',
                                 portal_auth_token[-8:])
                else:
                    message = "HTTP %i Error: %s" % (
                        e.response.status_code, e.response.text)
                    if hasattr(e, "request"):
                        message += " during %s %s" % (
                            e.request.method, e.request.url)  # pylint:disable=no-member
                    die(message)
        else:
            die("Unauthorised")

        capmanager.resume_global_capture()

        session.stbt_node = node
        session.stbt_run_prep = j
except ImportError:
    # Pytest integration is optional
    pass
